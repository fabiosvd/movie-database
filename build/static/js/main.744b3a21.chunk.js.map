{"version":3,"sources":["components/Searchbar.js","components/Navbar.js","components/Header.js","components/Footer.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","handleInput","search","className","type","placeholder","onChange","onKeyPress","Navbar","href","src","alt","Header","Footer","Result","result","openPopup","onClick","imdbID","Poster","Title","Year","Type","Results","results","map","key","id","Popup","selected","closePopup","imdbRating","Plot","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.744b3a21.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Searchbar = ({ handleInput, search }) => {\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"search-title\">\r\n          <h1>Find Movies, TV shows and more</h1>\r\n        </div>\r\n      </div>\r\n        <div className=\"search__form\">\r\n          <input \r\n          type=\"text\" \r\n          placeholder=\"Start typing...\" \r\n          onChange = {handleInput} \r\n          onKeyPress={search}/>\r\n          <button className=\"btn\">GO</button>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Searchbar\r\n","import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <a href=\"\" className=\"logo\">\r\n        <img src=\"/img/logo.png\" alt=\"\"></img>\r\n        <span>FsdMovies.to</span>\r\n      </a>\r\n      <nav className=\"nav-bar\">\r\n        <ul className=\"nav-bar\">\r\n          <li className=\"nav-bar\">Home</li>\r\n          <li className=\"nav-bar\">Genre</li>\r\n          <li className=\"nav-bar\">Country</li>\r\n          <li className=\"nav-bar\">Movies</li>\r\n          <li className=\"nav-bar\">TV Shows</li>\r\n          <li className=\"nav-bar\">Top IMDB</li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react'\r\nimport Searchbar from '../components/Searchbar';\r\nimport Navbar from '../components/Navbar';\r\nconst Header = ({handleInput, search}) => {\r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n        <div className=\"container\">\r\n          {/* <div className=\"row\">\r\n            <a href=\"#\" className=\"logo\">\r\n              <img src=\"/img/logo.png\" alt=\"\"></img>\r\n              <span>FsdMovies.to</span>\r\n            </a>\r\n          </div> */}\r\n          <Navbar />\r\n          <Searchbar handleInput={handleInput} search={search} />\r\n        </div>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nconst Footer = () => {\r\n  return (\r\n<footer className=\"footer\">\r\n  <div className=\"container\">\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"copyright\">\r\n        Â© 2020 - FsdMovies. Created by Fabio Salvador.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nfunction Result({ result, openPopup }) {\r\n  return (\r\n    <div className=\"movie-card\" onClick={() => openPopup(result.imdbID)} >\r\n      <div className=\"movie-card--poster\">\r\n        <div className=\"movie-card-quality\">HD</div>\r\n        <img src={result.Poster}></img>\r\n      </div>\r\n      <div className=\"movie-card--detail\">\r\n        <h3 className=\"movie-name\">\r\n          <a href=\"\">{result.Title}</a>\r\n        </h3>\r\n        <div className=\"movie-info\">\r\n          <span className=\"movie-info--date\">{result.Year}</span>\r\n          <span className=\"movie-info--dot\"></span>\r\n          <span className=\"movie-info--duration\">{result.Type}</span>\r\n          {/* <span className=\"movie-info--type\">{result.Runtime}</span> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result\r\n","import React from 'react'\r\nimport Result from '../components/Result';\r\n\r\nfunction Results({ results, openPopup }) {\r\n  return (\r\n    <div className = \"container\">\r\n      <div className=\"row\">\r\n        <div className=\"movies-title\">\r\n        <h2>Results:</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"movies\">\r\n          {results.map(result => (\r\n            <Result key={result.id} result={result} openPopup={openPopup}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n  return (\r\n    <div className=\"popup\">\r\n      <div className=\"content\">\r\n        <h2>{selected.Title} <span>({selected.Year})</span></h2>\r\n        <p className=\"rating\"> Rating: {selected.imdbRating}</p>\r\n        <div className=\"plot\">\r\n          <img src={selected.Poster} />\r\n          <p>{selected.Plot}</p>\r\n        </div>\r\n        <button className=\"close\" onClick={closePopup}>Close</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Popup\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Results from './components/Results';\nimport Popup from './components/Popup';\nimport axios from 'axios'\n\nconst App = () => {\n    const [state,setState] = useState ({\n      s:\"\",\n      results: [],\n      selected: {}\n    });\n    const apiurl = 'https://www.omdbapi.com/?apikey=df87707b';\n\n    const search = (e) => {\n      if (e.key === \"Enter\") {\n        axios(apiurl + \"&s=\" + state.s).then(( {data} ) => {\n          let results = data.Search;\n          \n\n          setState(prevState => {\n            return { ...prevState, results: results}\n          })\n        });\n      }\n    }\n\n    const handleInput = (e) => {\n      let s = e.target.value;\n\n      setState(prevState => {\n        return { ...prevState, s: s}\n      });\n    }\n\n    const openPopup = id => {\n      axios(apiurl + \"&i=\" + id).then(({ data }) => {\n        let result = data;\n\n        setState (prevState => {\n          return { ...prevState, selected: result}\n        }); \n      });\n    }\n\n    const closePopup = () => {\n      setState(prevState => {\n        return { ...prevState, selected: {} }\n      });\n    }\n    \n\n    return (\n    <div className=\"App\">\n      <Header handleInput={handleInput} search={search} />\n      <Results results={state.results} openPopup={openPopup} />\n      {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n      <Footer />\n    </div>\n    );\n  };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}